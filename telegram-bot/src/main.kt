import com.pengrad.telegrambot.TelegramBot
import com.pengrad.telegrambot.UpdatesListener
import com.pengrad.telegrambot.model.Update
import com.pengrad.telegrambot.model.request.ReplyKeyboardMarkup
import com.pengrad.telegrambot.model.request.KeyboardButton
import com.pengrad.telegrambot.request.SendMessage
import com.pengrad.telegrambot.response.SendResponse
import kotlinx.coroutines.*
import java.net.http.HttpClient
import java.net.http.HttpRequest
import java.net.http.HttpResponse
import java.net.URI
import kotlinx.serialization.*
import kotlinx.serialization.json.*

@Serializable
data class Subscription(
    val id: String,
    val userId: String,
    val name: String,
    val price: String,
    val currency: String,
    val billingCycle: String,
    val nextPaymentDate: String,
    val isActive: Boolean = true
)

@Serializable
data class CreateSubscriptionRequest(
    val userId: String,
    val name: String,
    val price: String,
    val currency: String,
    val billingCycle: String,
    val nextPaymentDate: String
)

class SubTrackerBot {
    private val bot: TelegramBot
    private val apiBaseUrl = "http://localhost:8080"
    private val httpClient = HttpClient.newHttpClient()
    private val userStates = mutableMapOf<Long, BotState>()
    private val tempSubscriptions = mutableMapOf<Long, MutableMap<String, String>>()
    
    enum class BotState {
        NONE,
        ADDING_SUBSCRIPTION_NAME,
        ADDING_SUBSCRIPTION_PRICE,
        ADDING_SUBSCRIPTION_CURRENCY,
        ADDING_SUBSCRIPTION_CYCLE,
        ADDING_SUBSCRIPTION_DATE
    }
    
    init {
        val botToken = System.getenv("TELEGRAM_BOT_TOKEN") 
            ?: "8368197859:AAHAlcm_UKKNaZ-qxZY72hOVmCFJNS_HIRg"
        bot = TelegramBot(botToken)
    }
    
    fun start() {
        println("Starting Telegram Bot...")
        
        bot.setUpdatesListener { updates ->
            for (update in updates) {
                try {
                    handleUpdate(update)
                } catch (e: Exception) {
                    println("Error handling update: ${e.message}")
                    e.printStackTrace()
                }
            }
            UpdatesListener.CONFIRMED_UPDATES_ALL
        }
        
        println("Bot is running... Press Ctrl+C to stop")
        
        // –î–æ–±–∞–≤–ª—è–µ–º shutdown hook
        Runtime.getRuntime().addShutdownHook(Thread {
            println("Stopping bot...")
            bot.shutdown()
        })
        
        // –î–µ—Ä–∂–∏–º –ø—Ä–æ–≥—Ä–∞–º–º—É –∑–∞–ø—É—â–µ–Ω–Ω–æ–π
        try {
            Thread.currentThread().join()
        } catch (e: InterruptedException) {
            println("Bot stopped")
        }
    }
    
    private fun handleUpdate(update: Update) {
        val message = update.message()
        if (message != null && message.text() != null) {
            val text = message.text()
            val chatId = message.chat().id()
            val userId = message.from().id()
            
            when {
                text.startsWith("/start") -> handleStartCommand(chatId, userId)
                text.startsWith("/help") -> handleHelpCommand(chatId)
                text.startsWith("/list") -> handleListCommand(chatId, userId)
                text.startsWith("/add") -> handleAddCommand(chatId, userId)
                text.startsWith("/delete") -> handleDeleteCommand(chatId, text)
                text.startsWith("/stats") -> handleStatsCommand(chatId, userId)
                text == "üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏" -> handleListCommand(chatId, userId)
                text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" -> handleAddCommand(chatId, userId)
                text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" -> handleStatsCommand(chatId, userId)
                text == "‚ùå –û—Ç–º–µ–Ω–∞" -> handleCancelCommand(chatId, userId)
                else -> handleTextInput(chatId, userId, text)
            }
        }
    }
    
    private fun handleStartCommand(chatId: Long, userId: Long) {
        val welcomeMessage = """
            üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SubTracker!
            
            –Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã.
            
            –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
            üìã /list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
            ‚ûï /add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
            üìä /stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            ‚ùì /help - –°–ø—Ä–∞–≤–∫–∞
        """.trimIndent()
        
        val keyboard = ReplyKeyboardMarkup(
            arrayOf(KeyboardButton("üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"), KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")),
            arrayOf(KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("‚ùì –°–ø—Ä–∞–≤–∫–∞"))
        ).resizeKeyboard(true)
        
        sendMessage(chatId, welcomeMessage, keyboard)
    }
    
    private fun handleHelpCommand(chatId: Long) {
        val helpMessage = """
            üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:
            
            üìã /list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            ‚ûï /add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
            üóë /delete [id] - –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ ID
            üìä /stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Ö–æ–¥–æ–≤
            ‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
            
            –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!
        """.trimIndent()
        
        sendMessage(chatId, helpMessage)
    }
    
    private fun handleListCommand(chatId: Long, userId: Long) {
        GlobalScope.launch {
            try {
                val subscriptions = fetchUserSubscriptions(userId.toString())
                
                if (subscriptions.isEmpty()) {
                    sendMessage(chatId, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –∏–ª–∏ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")
                } else {
                    val message = buildString {
                        appendLine("üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:")
                        appendLine()
                        
                        subscriptions.forEach { sub ->
                            appendLine("üî∏ ${sub.name}")
                            appendLine("   üí∞ ${sub.price} ${sub.currency}")
                            appendLine("   üîÑ ${translateBillingCycle(sub.billingCycle)}")
                            appendLine("   üìÖ –°–ª–µ–¥—É—é—â–∞—è –æ–ø–ª–∞—Ç–∞: ${sub.nextPaymentDate}")
                            appendLine("   üìù ID: ${sub.id}")
                            appendLine()
                        }
                        
                        appendLine("–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete [ID]")
                    }
                    
                    sendMessage(chatId, message)
                }
            } catch (e: Exception) {
                sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫: ${e.message}")
            }
        }
    }
    
    private fun handleAddCommand(chatId: Long, userId: Long) {
        userStates[userId] = BotState.ADDING_SUBSCRIPTION_NAME
        tempSubscriptions[userId] = mutableMapOf()
        
        val cancelKeyboard = ReplyKeyboardMarkup(
            arrayOf(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        ).resizeKeyboard(true)
        
        sendMessage(chatId, "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏\n\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Netflix, Spotify):", cancelKeyboard)
    }
    
    private fun handleDeleteCommand(chatId: Long, text: String) {
        val parts = text.split(" ")
        if (parts.size < 2) {
            sendMessage(chatId, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–¥–ø–∏—Å–∫–∏.\n–ü—Ä–∏–º–µ—Ä: /delete abc123")
            return
        }
        
        val subscriptionId = parts[1]
        
        GlobalScope.launch {
            try {
                val success = deleteSubscription(subscriptionId)
                if (success) {
                    sendMessage(chatId, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
                } else {
                    sendMessage(chatId, "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.")
                }
            } catch (e: Exception) {
                sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: ${e.message}")
            }
        }
    }
    
    private fun handleStatsCommand(chatId: Long, userId: Long) {
        GlobalScope.launch {
            try {
                val subscriptions = fetchUserSubscriptions(userId.toString())
                
                if (subscriptions.isEmpty()) {
                    sendMessage(chatId, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - —É –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.")
                    return@launch
                }
                
                val activeCount = subscriptions.count { it.isActive }
                val totalCost = subscriptions
                    .filter { it.isActive }
                    .sumOf { it.price.toDoubleOrNull() ?: 0.0 }
                
                val nextPayment = subscriptions
                    .filter { it.isActive }
                    .minByOrNull { it.nextPaymentDate }
                
                val message = buildString {
                    appendLine("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫:")
                    appendLine()
                    appendLine("üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: $activeCount")
                    appendLine("üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $%.2f USD".format(totalCost))
                    
                    if (nextPayment != null) {
                        appendLine("üìÖ –ë–ª–∏–∂–∞–π—à–∞—è –æ–ø–ª–∞—Ç–∞: ${nextPayment.nextPaymentDate}")
                        appendLine("   ${nextPayment.name} - ${nextPayment.price} ${nextPayment.currency}")
                    }
                }
                
                sendMessage(chatId, message)
            } catch (e: Exception) {
                sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${e.message}")
            }
        }
    }
    
    private fun handleCancelCommand(chatId: Long, userId: Long) {
        userStates.remove(userId)
        tempSubscriptions.remove(userId)
        
        val mainKeyboard = ReplyKeyboardMarkup(
            arrayOf(KeyboardButton("üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"), KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")),
            arrayOf(KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("‚ùì –°–ø—Ä–∞–≤–∫–∞"))
        ).resizeKeyboard(true)
        
        sendMessage(chatId, "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", mainKeyboard)
    }
    
    private fun handleTextInput(chatId: Long, userId: Long, text: String) {
        val state = userStates[userId] ?: BotState.NONE
        val tempSub = tempSubscriptions[userId] ?: return
        
        when (state) {
            BotState.ADDING_SUBSCRIPTION_NAME -> {
                tempSub["name"] = text
                userStates[userId] = BotState.ADDING_SUBSCRIPTION_PRICE
                sendMessage(chatId, "üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.99):")
            }
            
            BotState.ADDING_SUBSCRIPTION_PRICE -> {
                if (text.toDoubleOrNull() == null) {
                    sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.99):")
                    return
                }
                tempSub["price"] = text
                userStates[userId] = BotState.ADDING_SUBSCRIPTION_CURRENCY
                
                val currencyKeyboard = ReplyKeyboardMarkup(
                    arrayOf(KeyboardButton("USD"), KeyboardButton("EUR"), KeyboardButton("RUB")),
                    arrayOf(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
                ).resizeKeyboard(true)
                
                sendMessage(chatId, "üí± –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", currencyKeyboard)
            }
            
            BotState.ADDING_SUBSCRIPTION_CURRENCY -> {
                if (text !in listOf("USD", "EUR", "RUB", "GBP")) {
                    sendMessage(chatId, "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–∞–ª—é—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ USD, EUR –∏–ª–∏ RUB:")
                    return
                }
                tempSub["currency"] = text
                userStates[userId] = BotState.ADDING_SUBSCRIPTION_CYCLE
                
                val cycleKeyboard = ReplyKeyboardMarkup(
                    arrayOf(KeyboardButton("–ï–∂–µ–º–µ—Å—è—á–Ω–æ"), KeyboardButton("–ï–∂–µ–≥–æ–¥–Ω–æ")),
                    arrayOf(KeyboardButton("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ"), KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
                ).resizeKeyboard(true)
                
                sendMessage(chatId, "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–∏–∫–ª –æ–ø–ª–∞—Ç—ã:", cycleKeyboard)
            }
            
            BotState.ADDING_SUBSCRIPTION_CYCLE -> {
                val cycle = when (text) {
                    "–ï–∂–µ–º–µ—Å—è—á–Ω–æ" -> "monthly"
                    "–ï–∂–µ–≥–æ–¥–Ω–æ" -> "yearly"
                    "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ" -> "weekly"
                    else -> {
                        sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ü–∏–∫–ª –æ–ø–ª–∞—Ç—ã. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
                        return
                    }
                }
                tempSub["billingCycle"] = cycle
                userStates[userId] = BotState.ADDING_SUBSCRIPTION_DATE
                
                val cancelKeyboard = ReplyKeyboardMarkup(
                    arrayOf(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
                ).resizeKeyboard(true)
                
                sendMessage(chatId, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-12-25):", cancelKeyboard)
            }
            
            BotState.ADDING_SUBSCRIPTION_DATE -> {
                // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
                if (!text.matches(Regex("\\d{4}-\\d{2}-\\d{2}"))) {
                    sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-12-25):")
                    return
                }
                tempSub["nextPaymentDate"] = text
                
                // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                GlobalScope.launch {
                    try {
                        val request = CreateSubscriptionRequest(
                            userId = userId.toString(),
                            name = tempSub["name"]!!,
                            price = tempSub["price"]!!,
                            currency = tempSub["currency"]!!,
                            billingCycle = tempSub["billingCycle"]!!,
                            nextPaymentDate = tempSub["nextPaymentDate"]!!
                        )
                        
                        createSubscription(request)
                        
                        val mainKeyboard = ReplyKeyboardMarkup(
                            arrayOf(KeyboardButton("üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"), KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")),
                            arrayOf(KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("‚ùì –°–ø—Ä–∞–≤–∫–∞"))
                        ).resizeKeyboard(true)
                        
                        sendMessage(chatId, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ '${tempSub["name"]}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", mainKeyboard)
                        
                        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        userStates.remove(userId)
                        tempSubscriptions.remove(userId)
                        
                    } catch (e: Exception) {
                        sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: ${e.message}")
                    }
                }
            }
            
            else -> {
                sendMessage(chatId, "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
            }
        }
    }
    
    private suspend fun fetchUserSubscriptions(userId: String): List<Subscription> {
        return try {
            val request = HttpRequest.newBuilder()
                .uri(URI.create("$apiBaseUrl/subscriptions/$userId"))
                .GET()
                .build()
            
            val response = httpClient.send(request, HttpResponse.BodyHandlers.ofString())
            
            if (response.statusCode() == 200) {
                Json.decodeFromString<List<Subscription>>(response.body())
            } else {
                emptyList()
            }
        } catch (e: Exception) {
            println("Error fetching subscriptions: ${e.message}")
            emptyList()
        }
    }
    
    private suspend fun createSubscription(request: CreateSubscriptionRequest) {
        val json = Json.encodeToString(request)
        
        val httpRequest = HttpRequest.newBuilder()
            .uri(URI.create("$apiBaseUrl/subscriptions"))
            .header("Content-Type", "application/json")
            .POST(HttpRequest.BodyPublishers.ofString(json))
            .build()
        
        val response = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString())
        
        if (response.statusCode() !in 200..299) {
            throw Exception("HTTP ${response.statusCode()}: ${response.body()}")
        }
    }
    
    private suspend fun deleteSubscription(id: String): Boolean {
        return try {
            val request = HttpRequest.newBuilder()
                .uri(URI.create("$apiBaseUrl/subscriptions/$id"))
                .DELETE()
                .build()
            
            val response = httpClient.send(request, HttpResponse.BodyHandlers.ofString())
            response.statusCode() in 200..299
        } catch (e: Exception) {
            println("Error deleting subscription: ${e.message}")
            false
        }
    }
    
    private fun sendMessage(chatId: Long, text: String, keyboard: ReplyKeyboardMarkup? = null) {
        val request = SendMessage(chatId, text)
        keyboard?.let { request.replyMarkup(it) }
        
        try {
            val response: SendResponse = bot.execute(request)
            if (!response.isOk) {
                println("Failed to send message: ${response.description()}")
            }
        } catch (e: Exception) {
            println("Error sending message: ${e.message}")
        }
    }
    
    private fun translateBillingCycle(cycle: String): String {
        return when (cycle) {
            "monthly" -> "–ï–∂–µ–º–µ—Å—è—á–Ω–æ"
            "yearly" -> "–ï–∂–µ–≥–æ–¥–Ω–æ"
            "weekly" -> "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ"
            else -> cycle
        }
    }
}

fun main() {
    val bot = SubTrackerBot()
    bot.start()
}
