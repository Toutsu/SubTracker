import dev.inmo.tgbotapi.bot.TelegramBot
import dev.inmo.tgbotapi.extensions.api.send.sendTextMessage
import dev.inmo.tgbotapi.extensions.behaviour_builder.buildBehaviourWithLongPolling
import dev.inmo.tgbotapi.extensions.behaviour_builder.triggers_handling.onCommand
import dev.inmo.tgbotapi.types.ChatId
import dev.inmo.tgbotapi.types.buttons.ReplyKeyboardMarkup
import dev.inmo.tgbotapi.types.buttons.SimpleKeyboardButton
import dev.inmo.tgbotapi.types.message.abstracts.CommonMessage
import dev.inmo.tgbotapi.types.message.content.TextContent
import kotlinx.coroutines.*
import io.ktor.client.*
import io.ktor.client.engine.cio.*
import io.ktor.client.plugins.contentnegotiation.*
import io.ktor.client.request.*
import io.ktor.http.*
import io.ktor.serialization.kotlinx.json.*
import kotlinx.serialization.*
import kotlinx.serialization.json.*

@Serializable
data class Subscription(
    val id: String,
    val userId: String,
    val name: String,
    val price: String,
    val currency: String,
    val billingCycle: String,
    val nextPaymentDate: String,
    val isActive: Boolean = true
)

@Serializable
data class CreateSubscriptionRequest(
    val userId: String,
    val name: String,
    val price: String,
    val currency: String,
    val billingCycle: String,
    val nextPaymentDate: String
)

@Serializable
data class LoginRequest(
    val username: String,
    val password: String
)

@Serializable
data class LoginResponse(
    val token: String
)

class SubTrackerBot {
    private val bot: TelegramBot
    private val apiBaseUrl = "http://localhost:8080"
    private val httpClient = HttpClient(CIO) {
        install(ContentNegotiation) {
            json(Json {
                ignoreUnknownKeys = true
            })
        }
    }
    private val userStates = mutableMapOf<Long, BotState>()
    private val tempSubscriptions = mutableMapOf<Long, MutableMap<String, String>>()
    private val userTokens = mutableMapOf<Long, String>() // chatId -> JWT token
    
    enum class BotState {
        NONE,
        ADDING_SUBSCRIPTION_NAME,
        ADDING_SUBSCRIPTION_PRICE,
        ADDING_SUBSCRIPTION_CURRENCY,
        ADDING_SUBSCRIPTION_CYCLE,
        ADDING_SUBSCRIPTION_DATE,
        LOGIN_USERNAME,
        LOGIN_PASSWORD
    }
    
    init {
        val botToken = System.getenv("TELEGRAM_BOT_TOKEN") 
            ?: throw IllegalStateException("TELEGRAM_BOT_TOKEN environment variable is required")
        bot = TelegramBot(botToken)
    }
    
    fun start() {
        println("Starting Telegram Bot...")
        
        bot.buildBehaviourWithLongPolling {
            println("Bot is running... Press Ctrl+C to stop")
            
            // –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞
            onCommand("start") { message ->
                handleStartCommand(message.chat.id)
            }
            
            // –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
            onCommand("help") { message ->
                handleHelpCommand(message.chat.id)
            }
            
            // –ö–æ–º–∞–Ω–¥–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
            onCommand("list") { message ->
                handleListCommand(message.chat.id)
            }
            
            // –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            onCommand("add") { message ->
                handleAddCommand(message.chat.id)
            }
            
            // –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            onCommand("delete") { message ->
                val args = message.content.text.split(" ")
                if (args.size < 2) {
                    sendTextMessage(message.chat.id, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–¥–ø–∏—Å–∫–∏.\n–ü—Ä–∏–º–µ—Ä: /delete abc123")
                } else {
                    handleDeleteCommand(message.chat.id, args[1])
                }
            }
            
            // –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            onCommand("stats") { message ->
                handleStatsCommand(message.chat.id)
            }
            
            // –ö–æ–º–∞–Ω–¥–∞ –≤—Ö–æ–¥–∞
            onCommand("login") { message ->
                handleLoginCommand(message.chat.id)
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            on<TextContent> { message ->
                val chatId = message.chat.id
                val userId = chatId.chatId
                val text = message.content.text
                
                when (userStates[userId]) {
                    BotState.LOGIN_USERNAME -> {
                        userStates[userId] = BotState.LOGIN_PASSWORD
                        tempSubscriptions[userId] = mutableMapOf("username" to text)
                        sendTextMessage(chatId, "üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
                    }
                    
                    BotState.LOGIN_PASSWORD -> {
                        val username = tempSubscriptions[userId]?.get("username") ?: ""
                        handleLogin(chatId, username, text)
                    }
                    
                    else -> handleTextInput(chatId, userId, text)
                }
            }
        }.join()
    }
    
    private suspend fun handleStartCommand(chatId: ChatId) {
        val welcomeMessage = """
            üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SubTracker!
            
            –Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã.
            
            –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥:
            üîê /login - –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
            
            –ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
        """.trimIndent()
        
        sendTextMessage(chatId, welcomeMessage)
    }
    
    private suspend fun handleHelpCommand(chatId: ChatId) {
        val helpMessage = """
            üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:
            
            üîê /login - –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
            üìã /list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            ‚ûï /add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
            üóë /delete [id] - –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ ID
            üìä /stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Ö–æ–¥–æ–≤
            ‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
        """.trimIndent()
        
        sendTextMessage(chatId, helpMessage)
    }
    
    private suspend fun handleListCommand(chatId: ChatId) {
        val token = userTokens[chatId.chatId] ?: run {
            sendTextMessage(chatId, "üîí –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –≤—Ö–æ–¥–∞.")
            return
        }
        
        try {
            val subscriptions = httpClient.get("$apiBaseUrl/subscriptions") {
                header(HttpHeaders.Authorization, "Bearer $token")
            }.body<List<Subscription>>()
            
            if (subscriptions.isEmpty()) {
                sendTextMessage(chatId, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")
            } else {
                val message = buildString {
                    appendLine("üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:")
                    appendLine()
                    
                    subscriptions.forEach { sub ->
                        appendLine("üî∏ ${sub.name}")
                        appendLine("   üí∞ ${sub.price} ${sub.currency}")
                        appendLine("   üîÑ ${translateBillingCycle(sub.billingCycle)}")
                        appendLine("   üìÖ –°–ª–µ–¥—É—é—â–∞—è –æ–ø–ª–∞—Ç–∞: ${sub.nextPaymentDate}")
                        appendLine("   üìù ID: ${sub.id}")
                        appendLine()
                    }
                    
                    appendLine("–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete [ID]")
                }
                
                sendTextMessage(chatId, message)
            }
        } catch (e: Exception) {
            sendTextMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫: ${e.message}")
        }
    }
    
    private suspend fun handleAddCommand(chatId: ChatId) {
        val token = userTokens[chatId.chatId] ?: run {
            sendTextMessage(chatId, "üîí –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –≤—Ö–æ–¥–∞.")
            return
        }
        
        userStates[chatId.chatId] = BotState.ADDING_SUBSCRIPTION_NAME
        tempSubscriptions[chatId.chatId] = mutableMapOf()
        
        sendTextMessage(chatId, "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏\n\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Netflix, Spotify):")
    }
    
    private suspend fun handleDeleteCommand(chatId: ChatId, id: String) {
        val token = userTokens[chatId.chatId] ?: run {
            sendTextMessage(chatId, "üîí –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –≤—Ö–æ–¥–∞.")
            return
        }
        
        try {
            val response = httpClient.delete("$apiBaseUrl/subscriptions/$id") {
                header(HttpHeaders.Authorization, "Bearer $token")
            }
            
            if (response.status.isSuccess()) {
                sendTextMessage(chatId, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
            } else {
                sendTextMessage(chatId, "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.")
            }
        } catch (e: Exception) {
            sendTextMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: ${e.message}")
        }
    }
    
    private suspend fun handleStatsCommand(chatId: ChatId) {
        val token = userTokens[chatId.chatId] ?: run {
            sendTextMessage(chatId, "üîí –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –≤—Ö–æ–¥–∞.")
            return
        }
        
        try {
            val subscriptions = httpClient.get("$apiBaseUrl/subscriptions") {
                header(HttpHeaders.Authorization, "Bearer $token")
            }.body<List<Subscription>>()
            
            if (subscriptions.isEmpty()) {
                sendTextMessage(chatId, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - —É –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.")
                return
            }
            
            val activeCount = subscriptions.count { it.isActive }
            val totalCost = subscriptions
                .filter { it.isActive }
                .sumOf { it.price.toDoubleOrNull() ?: 0.0 }
            
            val nextPayment = subscriptions
                .filter { it.isActive }
                .minByOrNull { it.nextPaymentDate }
            
            val message = buildString {
                appendLine("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫:")
                appendLine()
                appendLine("üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: $activeCount")
                appendLine("üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $%.2f USD".format(totalCost))
                
                if (nextPayment != null) {
                    appendLine("üìÖ –ë–ª–∏–∂–∞–π—à–∞—è –æ–ø–ª–∞—Ç–∞: ${nextPayment.nextPaymentDate}")
                    appendLine("   ${nextPayment.name} - ${nextPayment.price} ${nextPayment.currency}")
                }
            }
            
            sendTextMessage(chatId, message)
        } catch (e: Exception) {
            sendTextMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${e.message}")
        }
    }
    
    private suspend fun handleLoginCommand(chatId: ChatId) {
        userStates[chatId.chatId] = BotState.LOGIN_USERNAME
        tempSubscriptions[chatId.chatId] = mutableMapOf()
        sendTextMessage(chatId, "üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É\n\nüë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    }
    
    private suspend fun handleLogin(chatId: ChatId, username: String, password: String) {
        try {
            val response = httpClient.post("$apiBaseUrl/login") {
                contentType(ContentType.Application.Json)
                setBody(LoginRequest(username, password))
            }
            
            if (response.status.isSuccess()) {
                val loginResponse = response.body<LoginResponse>()
                userTokens[chatId.chatId] = loginResponse.token
                userStates.remove(chatId.chatId)
                tempSubscriptions.remove(chatId.chatId)
                
                sendTextMessage(chatId, "‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏.")
            } else {
                sendTextMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")
            }
        } catch (e: Exception) {
            sendTextMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: ${e.message}")
        }
    }
    
    private suspend fun handleTextInput(chatId: ChatId, userId: Long, text: String) {
        val state = userStates[userId] ?: BotState.NONE
        val tempSub = tempSubscriptions[userId] ?: return
        
        when (state) {
            BotState.ADDING_SUBSCRIPTION_NAME -> {
                tempSub["name"] = text
                userStates[userId] = BotState.ADDING_SUBSCRIPTION_PRICE
                sendTextMessage(chatId, "üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.99):")
            }
            
            BotState.ADDING_SUBSCRIPTION_PRICE -> {
                if (text.toDoubleOrNull() == null) {
                    sendTextMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.99):")
                    return
                }
                tempSub["price"] = text
                userStates[userId] = BotState.ADDING_SUBSCRIPTION_CURRENCY
                sendTextMessage(chatId, "üí± –í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: USD, EUR, RUB):")
            }
            
            BotState.ADDING_SUBSCRIPTION_CURRENCY -> {
                if (text.length != 3) {
                    sendTextMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–∞–ª—é—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 3-–±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: USD):")
                    return
                }
                tempSub["currency"] = text
                userStates[userId] = BotState.ADDING_SUBSCRIPTION_CYCLE
                sendTextMessage(chatId, "üîÑ –í–≤–µ–¥–∏—Ç–µ —Ü–∏–∫–ª –æ–ø–ª–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: monthly, yearly, weekly):")
            }
            
            BotState.ADDING_SUBSCRIPTION_CYCLE -> {
                if (text !in listOf("monthly", "yearly", "weekly")) {
                    sendTextMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ü–∏–∫–ª –æ–ø–ª–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: monthly, yearly –∏–ª–∏ weekly.")
                    return
                }
                tempSub["billingCycle"] = text
                userStates[userId] = BotState.ADDING_SUBSCRIPTION_DATE
                sendTextMessage(chatId, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-12-25):")
            }
            
            BotState.ADDING_SUBSCRIPTION_DATE -> {
                // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
                if (!text.matches(Regex("\\d{4}-\\d{2}-\\d{2}"))) {
                    sendTextMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-12-25):")
                    return
                }
                tempSub["nextPaymentDate"] = text
                
                // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                try {
                    val token = userTokens[userId] ?: throw Exception("Not authenticated")
                    val request = CreateSubscriptionRequest(
                        userId = userId.toString(),
                        name = tempSub["name"]!!,
                        price = tempSub["price"]!!,
                        currency = tempSub["currency"]!!,
                        billingCycle = tempSub["billingCycle"]!!,
                        nextPaymentDate = tempSub["nextPaymentDate"]!!
                    )
                    
                    val response = httpClient.post("$apiBaseUrl/subscriptions") {
                        contentType(ContentType.Application.Json)
                        header(HttpHeaders.Authorization, "Bearer $token")
                        setBody(request)
                    }
                    
                    if (response.status.isSuccess()) {
                        sendTextMessage(chatId, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ '${tempSub["name"]}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                    } else {
                        sendTextMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: ${response.status.description}")
                    }
                    
                    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    userStates.remove(userId)
                    tempSubscriptions.remove(userId)
                    
                } catch (e: Exception) {
                    sendTextMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: ${e.message}")
                }
            }
            
            else -> {
                sendTextMessage(chatId, "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
            }
        }
    }
    
    private fun translateBillingCycle(cycle: String): String {
        return when (cycle) {
            "monthly" -> "–ï–∂–µ–º–µ—Å—è—á–Ω–æ"
            "yearly" -> "–ï–∂–µ–≥–æ–¥–Ω–æ"
            "weekly" -> "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ"
            else -> cycle
        }
    }
}

fun main() {
    val bot = SubTrackerBot()
    bot.start()
}
