import pytest
import asyncio
from unittest.mock import Mock, AsyncMock, patch
from bot import SubTrackerBot, BotState, User, Subscription, LoginRequest, LoginResponse, CreateSubscriptionRequest
from aiogram.types import Message, Chat, User as TelegramUser
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey

class TestSubTrackerBot:
    """–¢–µ—Å—Ç—ã –¥–ª—è Telegram –±–æ—Ç–∞ SubTracker"""
    
    @pytest.fixture
    def bot(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞"""
        with patch.dict('os.environ', {'TELEGRAM_BOT_TOKEN': '123456789:ABCdefGhIJKlmNoPQRsTUVwxyZ'}):
            with patch('bot.Bot') as mock_bot:
                mock_bot_instance = Mock()
                mock_bot.return_value = mock_bot_instance
                bot_instance = SubTrackerBot()
                bot_instance.bot = mock_bot_instance
                return bot_instance
    
    @pytest.fixture
    def message(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        chat = Mock()
        chat.id = 12345
        
        user = Mock(spec=TelegramUser)
        user.id = 12345
        user.username = "test_user"
        
        msg = Mock(spec=Message)
        msg.chat = chat
        msg.from_user = user
        msg.text = "test message"
        return msg
    
    @pytest.fixture
    def state(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        storage = AsyncMock()
        storage_key = StorageKey(bot_id=123, chat_id=12345, user_id=12345)
        return FSMContext(storage=storage, key=storage_key)
    
    def test_bot_initialization(self, bot):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞"""
        assert bot.bot_token == "123456789:ABCdefGhIJKlmNoPQRsTUVwxyZ"
        assert bot.api_base_url == "http://localhost:8080"
        assert isinstance(bot.user_tokens, dict)
    
    def test_bot_initialization_without_token(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞"""
        with patch.dict('os.environ', {}, clear=True):
            with pytest.raises(ValueError, match="TELEGRAM_BOT_TOKEN environment variable is required"):
                SubTrackerBot()
    
    @pytest.mark.asyncio
    async def test_handle_start_command(self, bot, message, state):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥ answer
        message.answer = AsyncMock()
        state.set_state = AsyncMock()
        
        await bot.handle_start_command(message, state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ answer —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        message.answer.assert_called_once()
        args, kwargs = message.answer.call_args
        assert "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SubTracker" in args[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ NONE
        state.set_state.assert_called_once_with(BotState.NONE)
    
    @pytest.mark.asyncio
    async def test_handle_help_command(self, bot, message):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥ answer
        message.answer = AsyncMock()
        
        await bot.handle_help_command(message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ answer —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        message.answer.assert_called_once()
        args, kwargs = message.answer.call_args
        assert "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º" in args[0]
    
    @pytest.mark.asyncio
    async def test_handle_login_command(self, bot, message, state):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /login"""
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥ answer
        message.answer = AsyncMock()
        state.set_state = AsyncMock()
        
        await bot.handle_login_command(message, state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ LOGIN_USERNAME
        state.set_state.assert_called_once_with(BotState.LOGIN_USERNAME)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message.answer.assert_called_once_with("üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    
    @pytest.mark.asyncio
    async def test_handle_login_username(self, bot, message, state):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ"""
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥—ã
        state.update_data = AsyncMock()
        state.set_state = AsyncMock()
        message.answer = AsyncMock()
        
        await bot.handle_login_username(message, state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        state.update_data.assert_called_once_with(username="test message")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ LOGIN_PASSWORD
        state.set_state.assert_called_once_with(BotState.LOGIN_PASSWORD)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è
        message.answer.assert_called_once_with("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    
    @pytest.mark.asyncio
    async def test_handle_login_password(self, bot, message, state):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ"""
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥—ã
        state.get_data = AsyncMock(return_value={"username": "test_user"})
        state.set_state = AsyncMock()
        state.clear = AsyncMock()
        message.answer = AsyncMock()
        
        with patch.object(bot, 'handle_login', new=AsyncMock()) as mock_handle_login:
            await bot.handle_login_password(message, state)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ handle_login —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            mock_handle_login.assert_called_once_with(message, "test_user", "test message")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ NONE –∏ –æ—á–∏—â–µ–Ω–æ
            state.set_state.assert_called_once_with(BotState.NONE)
            state.clear.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_handle_add_command_without_auth(self, bot, message, state):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /add –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥ answer
        message.answer = AsyncMock()
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        bot.user_tokens = {}
        
        await bot.handle_add_command(message, state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥
        message.answer.assert_called_once_with("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥: /login")
    
    @pytest.mark.asyncio
    async def test_handle_add_command_with_auth(self, bot, message, state):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /add —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥—ã
        message.answer = AsyncMock()
        state.set_state = AsyncMock()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.user_tokens[12345] = "test_token"
        
        await bot.handle_add_command(message, state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ ADDING_SUBSCRIPTION_NAME
        state.set_state.assert_called_once_with(BotState.ADDING_SUBSCRIPTION_NAME)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        message.answer.assert_called_once_with("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:")
    
    @pytest.mark.asyncio
    async def test_handle_subscription_name(self, bot, message, state):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥—ã
        state.update_data = AsyncMock()
        state.set_state = AsyncMock()
        message.answer = AsyncMock()
        
        await bot.handle_subscription_name(message, state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        state.update_data.assert_called_once_with(name="test message")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ADDING_SUBSCRIPTION_PRICE
        state.set_state.assert_called_once_with(BotState.ADDING_SUBSCRIPTION_PRICE)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        message.answer.assert_called_once_with("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:")
    
    @pytest.mark.asyncio
    async def test_handle_subscription_price(self, bot, message, state):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥—ã
        state.update_data = AsyncMock()
        state.set_state = AsyncMock()
        message.answer = AsyncMock()
        
        await bot.handle_subscription_price(message, state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
        state.update_data.assert_called_once_with(price="test message")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ADDING_SUBSCRIPTION_CURRENCY
        state.set_state.assert_called_once_with(BotState.ADDING_SUBSCRIPTION_CURRENCY)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –≤–∞–ª—é—Ç—ã
        message.answer.assert_called_once_with("üí± –í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: USD, EUR, RUB):")
    
    @pytest.mark.asyncio
    async def test_handle_subscription_currency(self, bot, message, state):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –≤–∞–ª—é—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥—ã
        state.update_data = AsyncMock()
        state.set_state = AsyncMock()
        message.answer = AsyncMock()
        
        await bot.handle_subscription_currency(message, state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–ª—é—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
        state.update_data.assert_called_once_with(currency="test message")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ADDING_SUBSCRIPTION_CYCLE
        state.set_state.assert_called_once_with(BotState.ADDING_SUBSCRIPTION_CYCLE)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å —Ü–∏–∫–ª–∞ –æ–ø–ª–∞—Ç—ã
        message.answer.assert_called_once_with("üîÑ –í–≤–µ–¥–∏—Ç–µ —Ü–∏–∫–ª –æ–ø–ª–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: monthly, yearly):")
    
    @pytest.mark.asyncio
    async def test_handle_subscription_cycle(self, bot, message, state):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ —Ü–∏–∫–ª–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥—ã
        state.update_data = AsyncMock()
        state.set_state = AsyncMock()
        message.answer = AsyncMock()
        
        await bot.handle_subscription_cycle(message, state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–∏–∫–ª –æ–ø–ª–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω
        state.update_data.assert_called_once_with(billing_cycle="test message")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ADDING_SUBSCRIPTION_DATE
        state.set_state.assert_called_once_with(BotState.ADDING_SUBSCRIPTION_DATE)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –¥–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        message.answer.assert_called_once_with("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ (YYYY-MM-DD):")
    
    @pytest.mark.asyncio
    async def test_handle_subscription_date(self, bot, message, state):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥—ã
        state.update_data = AsyncMock()
        state.get_data = AsyncMock(return_value={
            "name": "Test Subscription",
            "price": "9.99",
            "currency": "USD",
            "billing_cycle": "monthly",
            "next_payment_date": "2023-12-31"
        })
        state.set_state = AsyncMock()
        state.clear = AsyncMock()
        message.answer = AsyncMock()
        
        with patch.object(bot, 'create_subscription', new=AsyncMock()) as mock_create_subscription:
            await bot.handle_subscription_date(message, state)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
            state.update_data.assert_called_once_with(next_payment_date="test message")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ create_subscription
            mock_create_subscription.assert_called_once()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ NONE –∏ –æ—á–∏—â–µ–Ω–æ
            state.set_state.assert_called_once_with(BotState.NONE)
            state.clear.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_handle_delete_command_without_auth(self, bot, message):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /delete –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        from aiogram.filters import CommandObject
        
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥ answer
        message.answer = AsyncMock()
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        bot.user_tokens = {}
        
        command = Mock(spec=CommandObject)
        command.args = "test_id"
        
        await bot.handle_delete_command(message, command)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥
        message.answer.assert_called_once_with("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥: /login")
    
    @pytest.mark.asyncio
    async def test_handle_delete_command_without_args(self, bot, message):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /delete –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
        from aiogram.filters import CommandObject
        
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥ answer
        message.answer = AsyncMock()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.user_tokens[12345] = "test_token"
        
        command = Mock(spec=CommandObject)
        command.args = None
        
        await bot.handle_delete_command(message, command)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å ID –ø–æ–¥–ø–∏—Å–∫–∏
        message.answer.assert_called_once_with("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–¥–ø–∏—Å–∫–∏.\n–ü—Ä–∏–º–µ—Ä: /delete abc123")
    
    @pytest.mark.asyncio
    async def test_handle_stats_command_without_auth(self, bot, message):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥ answer
        message.answer = AsyncMock()
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        bot.user_tokens = {}
        
        await bot.handle_stats_command(message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥
        message.answer.assert_called_once_with("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥: /login")
    
    @pytest.mark.asyncio
    async def test_handle_text(self, bot, message, state):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥ answer
        message.answer = AsyncMock()
        
        await bot.handle_text(message, state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥
        message.answer.assert_called_once_with("‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è. /help - –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")

if __name__ == "__main__":
    pytest.main([__file__, "-v"])