import pytest
import asyncio
from unittest.mock import Mock, AsyncMock, patch
import aiohttp
from aiohttp import ClientResponse
from aioresponses import aioresponses
from bot import SubTrackerBot, LoginRequest, LoginResponse, CreateSubscriptionRequest, Subscription

class TestAPIIntegration:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å API"""
    
    @pytest.fixture
    def bot(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞"""
        with patch.dict('os.environ', {'TELEGRAM_BOT_TOKEN': '123456789:ABCdefGhIJKlmNoPQRsTUVwxyZ'}):
            with patch('bot.Bot') as mock_bot:
                mock_bot_instance = Mock()
                mock_bot.return_value = mock_bot_instance
                bot_instance = SubTrackerBot()
                bot_instance.bot = mock_bot_instance
                return bot_instance
    
    @pytest.fixture
    def message(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        chat = Mock()
        chat.id = 12345
        
        user = Mock()
        user.id = 12345
        user.username = "test_user"
        
        msg = Mock()
        msg.chat = chat
        msg.from_user = user
        msg.text = "test message"
        msg.answer = AsyncMock()
        return msg
    
    @pytest.mark.asyncio
    async def test_handle_login_success(self, bot, message):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        with aioresponses() as m:
            # –ú–æ–∫–∏—Ä—É–µ–º POST –∑–∞–ø—Ä–æ—Å –∫ API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            m.post(
                "http://localhost:8080/api/login",
                payload={"token": "test_jwt_token"},
                status=200
            )
            
            await bot.handle_login(message, "test_user", "test_password")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω
            assert bot.user_tokens[12345] == "test_jwt_token"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—Ö–æ–¥–µ
            message.answer.assert_called_once_with("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.")
    
    @pytest.mark.asyncio
    async def test_handle_login_failure(self, bot, message):
        """–¢–µ—Å—Ç –Ω–µ—É–¥–∞—á–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        with aioresponses() as m:
            # –ú–æ–∫–∏—Ä—É–µ–º POST –∑–∞–ø—Ä–æ—Å –∫ API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –æ—à–∏–±–∫–æ–π
            m.post(
                "http://localhost:8080/api/login",
                status=401
            )
            
            await bot.handle_login(message, "test_user", "wrong_password")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
            assert 12345 not in bot.user_tokens
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            message.answer.assert_called_once_with("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
    
    @pytest.mark.asyncio
    async def test_handle_login_exception(self, bot, message):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        with aioresponses() as m:
            # –ú–æ–∫–∏—Ä—É–µ–º POST –∑–∞–ø—Ä–æ—Å –∫ API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º
            m.post(
                "http://localhost:8080/api/login",
                exception=Exception("Connection error")
            )
            
            await bot.handle_login(message, "test_user", "test_password")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
            assert 12345 not in bot.user_tokens
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            message.answer.assert_called_once_with("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º")
    
    @pytest.mark.asyncio
    async def test_handle_list_subscriptions_success(self, bot, message):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω
        bot.user_tokens[12345] = "test_token"
        
        # –°–æ–∑–¥–∞–µ–º mock –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        subscriptions_data = [
            {
                "id": "sub1",
                "user_id": "12345",
                "name": "Netflix",
                "price": "15.99",
                "currency": "USD",
                "billing_cycle": "monthly",
                "next_payment_date": "2023-12-31",
                "is_active": True
            },
            {
                "id": "sub2",
                "user_id": "12345",
                "name": "Spotify",
                "price": "9.99",
                "currency": "USD",
                "billing_cycle": "monthly",
                "next_payment_date": "2023-12-15",
                "is_active": True
            }
        ]
        
        with aioresponses() as m:
            # –ú–æ–∫–∏—Ä—É–µ–º GET –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
            m.get(
                "http://localhost:8080/api/subscriptions",
                payload=subscriptions_data,
                status=200
            )
            
            await bot.handle_list_command(message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–¥–ø–∏—Å–æ–∫
            message.answer.assert_called_once()
            args, kwargs = message.answer.call_args
            message_text = args[0]
            assert "üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:" in message_text
            assert "Netflix" in message_text
            assert "Spotify" in message_text
    
    @pytest.mark.asyncio
    async def test_handle_list_subscriptions_empty(self, bot, message):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω
        bot.user_tokens[12345] = "test_token"
        
        with aioresponses() as m:
            # –ú–æ–∫–∏—Ä—É–µ–º GET –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
            m.get(
                "http://localhost:8080/api/subscriptions",
                payload=[],
                status=200
            )
            
            await bot.handle_list_command(message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫
            message.answer.assert_called_once_with("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.\n–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é: /add")
    
    @pytest.mark.asyncio
    async def test_handle_list_subscriptions_failure(self, bot, message):
        """–¢–µ—Å—Ç –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω
        bot.user_tokens[12345] = "test_token"
        
        with aioresponses() as m:
            # –ú–æ–∫–∏—Ä—É–µ–º GET –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ —Å –æ—à–∏–±–∫–æ–π
            m.get(
                "http://localhost:8080/api/subscriptions",
                status=500
            )
            
            await bot.handle_list_command(message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            message.answer.assert_called_once_with("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫")
    
    @pytest.mark.asyncio
    async def test_create_subscription_success(self, bot, message):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω
        bot.user_tokens[12345] = "test_token"
        
        # –î–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        subscription_data = {
            "name": "Test Subscription",
            "price": "9.99",
            "currency": "USD",
            "billing_cycle": "monthly",
            "next_payment_date": "2023-12-31"
        }
        
        with aioresponses() as m:
            # –ú–æ–∫–∏—Ä—É–µ–º POST –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            m.post(
                "http://localhost:8080/api/subscriptions",
                status=201
            )
            
            await bot.create_subscription(message, subscription_data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
            message.answer.assert_called_once_with("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
    
    @pytest.mark.asyncio
    async def test_create_subscription_failure(self, bot, message):
        """–¢–µ—Å—Ç –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω
        bot.user_tokens[12345] = "test_token"
        
        # –î–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        subscription_data = {
            "name": "Test Subscription",
            "price": "9.99",
            "currency": "USD",
            "billing_cycle": "monthly",
            "next_payment_date": "2023-12-31"
        }
        
        with aioresponses() as m:
            # –ú–æ–∫–∏—Ä—É–µ–º POST –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —Å –æ—à–∏–±–∫–æ–π
            m.post(
                "http://localhost:8080/api/subscriptions",
                status=400
            )
            
            await bot.create_subscription(message, subscription_data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            message.answer.assert_called_once_with("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
    
    @pytest.mark.asyncio
    async def test_handle_delete_subscription_success(self, bot, message):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        from aiogram.filters import CommandObject
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω
        bot.user_tokens[12345] = "test_token"
        
        # –°–æ–∑–¥–∞–µ–º mock –∫–æ–º–∞–Ω–¥—ã
        command = Mock(spec=CommandObject)
        command.args = "test_subscription_id"
        
        with aioresponses() as m:
            # –ú–æ–∫–∏—Ä—É–µ–º DELETE –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            m.delete(
                "http://localhost:8080/api/subscriptions/test_subscription_id",
                status=200
            )
            
            await bot.handle_delete_command(message, command)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
            message.answer.assert_called_once_with("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
    
    @pytest.mark.asyncio
    async def test_handle_stats_command_success(self, bot, message):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω
        bot.user_tokens[12345] = "test_token"
        
        # –°–æ–∑–¥–∞–µ–º mock –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        subscriptions_data = [
            {
                "id": "sub1",
                "user_id": "12345",
                "name": "Netflix",
                "price": "15.99",
                "currency": "USD",
                "billing_cycle": "monthly",
                "next_payment_date": "2023-12-31",
                "is_active": True
            },
            {
                "id": "sub2",
                "user_id": "12345",
                "name": "Spotify",
                "price": "9.99",
                "currency": "USD",
                "billing_cycle": "monthly",
                "next_payment_date": "2023-12-15",
                "is_active": True
            }
        ]
        
        with aioresponses() as m:
            # –ú–æ–∫–∏—Ä—É–µ–º GET –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
            m.get(
                "http://localhost:8080/api/subscriptions",
                payload=subscriptions_data,
                status=200
            )
            
            await bot.handle_stats_command(message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            message.answer.assert_called_once()
            args, kwargs = message.answer.call_args
            message_text = args[0]
            assert "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫:" in message_text
            assert "–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫: 2" in message_text
            assert "–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ –º–µ—Å—è—Ü: $25.98" in message_text

if __name__ == "__main__":
    pytest.main([__file__, "-v"])