import asyncio
import os
from typing import Dict, Optional, Any
from dataclasses import dataclass, asdict
from enum import Enum
import aiohttp
from aiohttp import ClientSession
import json
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandObject
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö
@dataclass
class User:
    id: str
    username: str
    email: str
    password_hash: str


class BillingCycle(Enum):
    MONTHLY = "monthly"
    YEARLY = "yearly"
    WEEKLY = "weekly"


@dataclass
class Subscription:
    id: str
    user_id: str
    name: str
    price: str
    currency: str
    billing_cycle: str
    next_payment_date: str
    is_active: bool = True


@dataclass
class CreateSubscriptionRequest:
    user_id: str
    name: str
    price: str
    currency: str
    billing_cycle: str
    next_payment_date: str


@dataclass
class LoginRequest:
    username: str
    password: str


@dataclass
class LoginResponse:
    token: str


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class BotState(StatesGroup):
    NONE = State()
    ADDING_SUBSCRIPTION_NAME = State()
    ADDING_SUBSCRIPTION_PRICE = State()
    ADDING_SUBSCRIPTION_CURRENCY = State()
    ADDING_SUBSCRIPTION_CYCLE = State()
    ADDING_SUBSCRIPTION_DATE = State()
    LOGIN_USERNAME = State()
    LOGIN_PASSWORD = State()


class SubTrackerBot:
    def __init__(self):
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        if not self.bot_token:
            raise ValueError("TELEGRAM_BOT_TOKEN environment variable is required")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        self.bot = Bot(token=self.bot_token)
        self.dp = Dispatcher(storage=MemoryStorage())
        
        # –ë–∞–∑–æ–≤—ã–π URL API
        self.api_base_url = os.getenv("BACKEND_API_URL", "http://backend:8080")
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_tokens: Dict[int, str] = {}  # chat_id -> JWT token
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.register_handlers()
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.dp.message(Command("start"))(self.handle_start_command)
        self.dp.message(Command("help"))(self.handle_help_command)
        self.dp.message(Command("list"))(self.handle_list_command)
        self.dp.message(Command("add"))(self.handle_add_command)
        self.dp.message(Command("delete"))(self.handle_delete_command)
        self.dp.message(Command("stats"))(self.handle_stats_command)
        self.dp.message(Command("login"))(self.handle_login_command)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.dp.message(BotState.LOGIN_USERNAME)(self.handle_login_username)
        self.dp.message(BotState.LOGIN_PASSWORD)(self.handle_login_password)
        self.dp.message(BotState.ADDING_SUBSCRIPTION_NAME)(self.handle_subscription_name)
        self.dp.message(BotState.ADDING_SUBSCRIPTION_PRICE)(self.handle_subscription_price)
        self.dp.message(BotState.ADDING_SUBSCRIPTION_CURRENCY)(self.handle_subscription_currency)
        self.dp.message(BotState.ADDING_SUBSCRIPTION_CYCLE)(self.handle_subscription_cycle)
        self.dp.message(BotState.ADDING_SUBSCRIPTION_DATE)(self.handle_subscription_date)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.dp.message(F.text)(self.handle_text)
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("Starting Telegram Bot...")
        print("Bot is running... Press Ctrl+C to stop")
        await self.dp.start_polling(self.bot)
    
    async def handle_start_command(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_message = """
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SubTracker!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã.

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥:
üîê /login - –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É

–ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
        """.strip()
        
        await message.answer(welcome_message)
        await state.set_state(BotState.NONE)
    
    async def handle_help_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_message = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

üîê /login - –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
üìã /list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏
‚ûï /add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
üóë /delete [id] - –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ ID
üìä /stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Ö–æ–¥–æ–≤
‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
        """.strip()
        
        await message.answer(help_message)
    
    async def handle_login_command(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /login"""
        await state.set_state(BotState.LOGIN_USERNAME)
        await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    
    async def handle_login_username(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ"""
        await state.update_data(username=message.text)
        await state.set_state(BotState.LOGIN_PASSWORD)
        await message.answer("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    
    async def handle_login_password(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await state.get_data()
        username = user_data.get("username", "")
        password = message.text
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏–Ω
        await self.handle_login(message, username, password)
        await state.set_state(BotState.NONE)
        await state.clear()
    
    async def handle_login(self, message: Message, username: str, password: str):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            login_request = LoginRequest(username=username, password=password)
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.api_base_url}/api/auth/login",
                    json=asdict(login_request),
                    headers={"Content-Type": "application/json"}
                ) as response:
                    if response.status == 200:
                        response_data = await response.json()
                        login_response = LoginResponse(token=response_data["token"])
                        self.user_tokens[message.chat.id] = login_response.token
                        
                        await message.answer("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.")
                    else:
                        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
        except Exception as e:
            print(f"Login error: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º")
    
    async def handle_list_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /list"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        token = self.user_tokens.get(message.chat.id)
        if not token:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥: /login")
            return
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"{self.api_base_url}/api/subscriptions",
                    headers={"Authorization": f"Bearer {token}"}
                ) as response:
                    if response.status == 200:
                        subscriptions_data = await response.json()
                        subscriptions = [Subscription(**sub) for sub in subscriptions_data]
                        
                        if not subscriptions:
                            await message.answer("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.\n–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é: /add")
                        else:
                            message_text = "üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n"
                            for sub in subscriptions:
                                message_text += f"‚Ä¢ {sub.name} - {sub.price} {sub.currency} ({sub.billing_cycle})\n"
                                message_text += f"  ID: {sub.id} | –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂: {sub.next_payment_date}\n"
                            
                            await message.answer(message_text)
                    else:
                        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫")
        except Exception as e:
            print(f"List subscriptions error: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º")
    
    async def handle_add_command(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /add"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        token = self.user_tokens.get(message.chat.id)
        if not token:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥: /login")
            return
        
        await state.set_state(BotState.ADDING_SUBSCRIPTION_NAME)
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:")
    
    async def handle_subscription_name(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        await state.update_data(name=message.text)
        await state.set_state(BotState.ADDING_SUBSCRIPTION_PRICE)
        await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:")
    
    async def handle_subscription_price(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        await state.update_data(price=message.text)
        await state.set_state(BotState.ADDING_SUBSCRIPTION_CURRENCY)
        await message.answer("üí± –í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: USD, EUR, RUB):")
    
    async def handle_subscription_currency(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–∞–ª—é—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
        await state.update_data(currency=message.text)
        await state.set_state(BotState.ADDING_SUBSCRIPTION_CYCLE)
        await message.answer("üîÑ –í–≤–µ–¥–∏—Ç–µ —Ü–∏–∫–ª –æ–ø–ª–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: monthly, yearly):")
    
    async def handle_subscription_cycle(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–∏–∫–ª–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
        await state.update_data(billing_cycle=message.text)
        await state.set_state(BotState.ADDING_SUBSCRIPTION_DATE)
        await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ (YYYY-MM-DD):")
    
    async def handle_subscription_date(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        await state.update_data(next_payment_date=message.text)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        subscription_data = await state.get_data()
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        await self.create_subscription(message, subscription_data)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(BotState.NONE)
        await state.clear()
    
    async def create_subscription(self, message: Message, subscription_data: dict):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        token = self.user_tokens.get(message.chat.id)
        if not token:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return
        
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
            create_request = CreateSubscriptionRequest(
                user_id=str(message.chat.id),
                name=subscription_data["name"],
                price=subscription_data["price"],
                currency=subscription_data["currency"],
                billing_cycle=subscription_data["billing_cycle"],
                next_payment_date=subscription_data["next_payment_date"]
            )
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.api_base_url}/api/subscriptions",
                    json=asdict(create_request),
                    headers={
                        "Authorization": f"Bearer {token}",
                        "Content-Type": "application/json"
                    }
                ) as response:
                    if response.status == 201:
                        await message.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
                    else:
                        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
        except Exception as e:
            print(f"Create subscription error: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º")
    
    async def handle_delete_command(self, message: Message, command: CommandObject):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /delete"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        token = self.user_tokens.get(message.chat.id)
        if not token:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥: /login")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞
        if not command.args:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–¥–ø–∏—Å–∫–∏.\n–ü—Ä–∏–º–µ—Ä: /delete abc123")
            return
        
        subscription_id = command.args.strip()
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.delete(
                    f"{self.api_base_url}/api/subscriptions/{subscription_id}",
                    headers={"Authorization": f"Bearer {token}"}
                ) as response:
                    if response.status == 200:
                        await message.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
                    else:
                        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
        except Exception as e:
            print(f"Delete subscription error: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º")
    
    async def handle_stats_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        token = self.user_tokens.get(message.chat.id)
        if not token:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥: /login")
            return
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"{self.api_base_url}/api/subscriptions",
                    headers={"Authorization": f"Bearer {token}"}
                ) as response:
                    if response.status == 200:
                        subscriptions_data = await response.json()
                        subscriptions = [Subscription(**sub) for sub in subscriptions_data]
                        
                        if not subscriptions:
                            await message.answer("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                        else:
                            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                            total_monthly = sum(float(sub.price) for sub in subscriptions)
                            
                            total_yearly = 0
                            for sub in subscriptions:
                                price = float(sub.price)
                                if sub.billing_cycle.lower() == "monthly":
                                    total_yearly += price * 12
                                elif sub.billing_cycle.lower() == "yearly":
                                    total_yearly += price
                                else:
                                    total_yearly += price  # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ü–∏–∫–ª–æ–≤ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                            
                            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é –¥–µ—à–µ–≤—É—é –∏ —Å–∞–º—É—é –¥–æ—Ä–æ–≥—É—é –ø–æ–¥–ø–∏—Å–∫—É
                            cheapest = min(subscriptions, key=lambda x: float(x.price))
                            most_expensive = max(subscriptions, key=lambda x: float(x.price))
                            
                            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
                            stats_message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫:\n"
                            stats_message += f"üí∞ –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫: {len(subscriptions)}\n"
                            stats_message += f"üíµ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ –º–µ—Å—è—Ü: ${total_monthly:.2f}\n"
                            stats_message += f"üíµ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ –≥–æ–¥: ${total_yearly:.2f}\n"
                            stats_message += f"üíö –°–∞–º–∞—è –¥–µ—à–µ–≤–∞—è: {cheapest.name} - {cheapest.price} {cheapest.currency}\n"
                            stats_message += f"üíî –°–∞–º–∞—è –¥–æ—Ä–æ–≥–∞—è: {most_expensive.name} - {most_expensive.price} {most_expensive.currency}\n"
                            
                            await message.answer(stats_message)
                    else:
                        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        except Exception as e:
            print(f"Stats error: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º")
    
    async def handle_text(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await message.answer("‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è. /help - –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        bot = SubTrackerBot()
        await bot.start()
    except Exception as e:
        print(f"Error starting bot: {e}")


if __name__ == "__main__":
    asyncio.run(main())