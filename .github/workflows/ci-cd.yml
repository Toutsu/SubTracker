name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  JAVA_VERSION: '17'
  JAVA_DISTRIBUTION: 'temurin'
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # –°–±–æ—Ä–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: ‚òï Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: 'maven'

      - name: üêç Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: üß± Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web-frontend/package-lock.json

      - name: üîß Grant execute permission for mvnw
        run: |
          cd backend
          chmod +x mvnw

      - name: üèóÔ∏è Build backend with Maven
        run: |
          cd backend
          ./mvnw clean package -DskipTests

      - name: üß™ Run backend tests
        run: |
          cd backend
          ./mvnw test

      - name: üì¶ Install frontend dependencies
        run: |
          cd web-frontend
          npm ci

      - name: üé® Lint frontend code
        run: |
          cd web-frontend
          npm run lint

      - name: üß™ Run frontend tests
        run: |
          cd web-frontend
          npm test

      - name: üèóÔ∏è Build frontend
        run: |
          cd web-frontend
          npm run build

      - name: üêç Install bot dependencies
        run: |
          cd telegram-bot
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: üß™ Run bot tests
        run: |
          cd telegram-bot
          python -m pytest

      - name: üìä Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: 'Test Results'
          path: |
            backend/target/surefire-reports/*.xml
            web-frontend/junit.xml
          reporter: java-junit

      - name: üì¶ Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-artifacts
          path: |
            backend/target/*.jar
            web-frontend/.next/
            telegram-bot/dist/
          retention-days: 7

 # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  code-quality:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: ‚òï Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: 'maven'

      - name: üîç Run detekt (Kotlin linter)
        run: |
          cd backend
          ./mvnw detekt:check || true

      - name: üîí Run dependency vulnerability check
        run: |
          cd backend
          ./mvnw dependency-check:check || true

  # –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è main –≤–µ—Ç–∫–∏)
 docker-build:
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: üì¶ Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/subtracker-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: üèóÔ∏è Build and push backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å —Ä–µ–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
  integration-tests:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: subtracker_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: ‚òï Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: 'maven'

      - name: üîß Grant execute permission for mvnw
        run: |
          cd backend
          chmod +x mvnw

      - name: üß™ Run integration tests with PostgreSQL
        run: |
          cd backend
          ./mvnw verify -Dspring.profiles.active=test

      - name: üåê Test web frontend files
        run: |
          cd web-frontend
          npm ci
          npm run build
          npx serve -s out & 
          sleep 5
          curl -f http://localhost:3000/ || exit 1

  # –î–µ–ø–ª–æ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è main –≤–µ—Ç–∫–∏)
  deploy:
    runs-on: ubuntu-latest
    needs: [docker-build, integration-tests]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: üöÄ Deploy to production server
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Docker –æ–±—Ä–∞–∑–æ–≤
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/subtracker-backend:latest
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            docker stop subtracker-backend || true
            docker rm subtracker-backend || true
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            docker exec subtracker-backend cp /app/data/subtracker.db /app/data/subtracker.db.backup.$(date +%Y%m%d_%H%M%S) || true
            
            # –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            docker run -d \
              --name subtracker-backend \
              --restart unless-stopped \
              -p 8080:8080 \
              -v /opt/subtracker/data:/app/data \
              -e DATABASE_URL="jdbc:sqlite:/app/data/subtracker.db" \
              -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              ${{ secrets.DOCKERHUB_USERNAME }}/subtracker-backend:latest
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
            sleep 10
            curl -f http://localhost:8080/health || exit 1
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints
            curl -f http://localhost:8080/login -X POST \
              -H "Content-Type: application/json" \
              -d '{"username":"user","password":"user"}' || exit 1
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            docker ps | grep subtracker-backend || exit 1
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
            docker logs subtracker-backend 2>&1 | grep -i error || true

  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –¥–µ–ø–ª–æ—è
 notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: üìß Notify deployment status
        uses: 8398a7/action-slack@v3
        if: env.SLACK_WEBHOOK_URL != ''
        with:
          status: ${{ needs.deploy.result }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: üìã Create release on success
        if: needs.deploy.result == 'success'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–ª–∏–∑ –∏–∑ –≤–µ—Ç–∫–∏ main
            
            ## –ò–∑–º–µ–Ω–µ–Ω–∏—è:
            - Commit: ${{ github.sha }}
            - Author: ${{ github.actor }}
            - Workflow: ${{ github.workflow }}
            
            ## –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
            - ‚úÖ Backend API (SQLite/PostgreSQL)
            - ‚úÖ Web Frontend (Next.js 15)
            - ‚úÖ Telegram Bot (aiogram 3.22)
            
            ## –ü—Ä–æ–≤–µ—Ä–∫–∏:
            - ‚úÖ –°–±–æ—Ä–∫–∞ –∏ —Ç–µ—Å—Ç—ã
            - ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
            - ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
            - ‚úÖ Docker –æ–±—Ä–∞–∑—ã
            - ‚úÖ –î–µ–ø–ª–æ–π –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω
          draft: false
          prerelease: false