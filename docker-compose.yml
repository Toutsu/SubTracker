version: '3.8'

services:
  # Backend API сервер
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: subtracker-backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - ./data:/app/data
    environment:
      - DATABASE_URL=jdbc:sqlite:/app/data/subtracker.db
      - DATABASE_DRIVER=org.sqlite.JDBC
      - DATABASE_USER=
      - DATABASE_PASSWORD=
      - JWT_SECRET=${JWT_SECRET:-default-secret-change-in-production}
      - JWT_ISSUER=SubTracker
      - JWT_AUDIENCE=users
      - JWT_REALM=SubTracker
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - subtracker-network

  # Web Frontend (nginx для статических файлов)
  frontend:
    image: nginx:alpine
    container_name: subtracker-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    volumes:
      - ./web-frontend/src/jsMain/resources:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - subtracker-network

  # Telegram Bot (опционально)
  telegram-bot:
    build:
      context: .
      dockerfile: telegram-bot/Dockerfile
    container_name: subtracker-bot
    restart: unless-stopped
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - BACKEND_API_URL=http://backend:8080
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - subtracker-network
    profiles:
      - with-bot

networks:
  subtracker-network:
    driver: bridge

volumes:
  subtracker-data:
    driver: local